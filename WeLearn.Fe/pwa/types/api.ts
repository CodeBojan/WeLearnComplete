//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class DeleteFollowedCourseDto implements IDeleteFollowedCourseDto {
    accountId?: string;
    courseId?: string;

    constructor(data?: IDeleteFollowedCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.courseId = _data["courseId"];
        }
    }

    static fromJS(data: any): DeleteFollowedCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFollowedCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["courseId"] = this.courseId;
        return data;
    }
}

export interface IDeleteFollowedCourseDto {
    accountId?: string;
    courseId?: string;
}

export class DeleteFollowedStudyYearDto implements IDeleteFollowedStudyYearDto {
    accountId?: string;
    studyYearId?: string;

    constructor(data?: IDeleteFollowedStudyYearDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.studyYearId = _data["studyYearId"];
        }
    }

    static fromJS(data: any): DeleteFollowedStudyYearDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFollowedStudyYearDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["studyYearId"] = this.studyYearId;
        return data;
    }
}

export interface IDeleteFollowedStudyYearDto {
    accountId?: string;
    studyYearId?: string;
}

export class GetAccountDto implements IGetAccountDto {
    id?: string;
    username?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    facultyStudentId?: string | undefined;

    constructor(data?: IGetAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.facultyStudentId = _data["facultyStudentId"];
        }
    }

    static fromJS(data: any): GetAccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["facultyStudentId"] = this.facultyStudentId;
        return data;
    }
}

export interface IGetAccountDto {
    id?: string;
    username?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    facultyStudentId?: string | undefined;
}

export class GetAccountDtoPagedResponseDto implements IGetAccountDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetAccountDto[] | undefined;

    constructor(data?: IGetAccountDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAccountDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAccountDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAccountDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetAccountDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetAccountDto[] | undefined;
}

export class GetCourseDto implements IGetCourseDto {
    id?: string;
    code?: string | undefined;
    shortName?: string | undefined;
    fullName?: string | undefined;
    staff?: string | undefined;
    description?: string | undefined;
    rules?: string | undefined;
    studyYearId?: string;
    createdDate?: Date;
    updatedDate?: Date;
    followingCount?: number | undefined;
    isFollowing?: boolean | undefined;

    constructor(data?: IGetCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.staff = _data["staff"];
            this.description = _data["description"];
            this.rules = _data["rules"];
            this.studyYearId = _data["studyYearId"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            this.followingCount = _data["followingCount"];
            this.isFollowing = _data["isFollowing"];
        }
    }

    static fromJS(data: any): GetCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["staff"] = this.staff;
        data["description"] = this.description;
        data["rules"] = this.rules;
        data["studyYearId"] = this.studyYearId;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["followingCount"] = this.followingCount;
        data["isFollowing"] = this.isFollowing;
        return data;
    }
}

export interface IGetCourseDto {
    id?: string;
    code?: string | undefined;
    shortName?: string | undefined;
    fullName?: string | undefined;
    staff?: string | undefined;
    description?: string | undefined;
    rules?: string | undefined;
    studyYearId?: string;
    createdDate?: Date;
    updatedDate?: Date;
    followingCount?: number | undefined;
    isFollowing?: boolean | undefined;
}

export class GetCourseDtoPagedResponseDto implements IGetCourseDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetCourseDto[] | undefined;

    constructor(data?: IGetCourseDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetCourseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCourseDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourseDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCourseDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetCourseDto[] | undefined;
}

export class GetCourseMaterialUploadRequestDto implements IGetCourseMaterialUploadRequestDto {
    id?: string;
    body?: string | undefined;
    isApproved?: boolean;
    remark?: string | undefined;
    type?: string | undefined;
    creatorId?: string;
    courseId?: string;
    documents?: GetDocumentDto[] | undefined;

    constructor(data?: IGetCourseMaterialUploadRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.body = _data["body"];
            this.isApproved = _data["isApproved"];
            this.remark = _data["remark"];
            this.type = _data["type"];
            this.creatorId = _data["creatorId"];
            this.courseId = _data["courseId"];
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(GetDocumentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCourseMaterialUploadRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourseMaterialUploadRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["body"] = this.body;
        data["isApproved"] = this.isApproved;
        data["remark"] = this.remark;
        data["type"] = this.type;
        data["creatorId"] = this.creatorId;
        data["courseId"] = this.courseId;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCourseMaterialUploadRequestDto {
    id?: string;
    body?: string | undefined;
    isApproved?: boolean;
    remark?: string | undefined;
    type?: string | undefined;
    creatorId?: string;
    courseId?: string;
    documents?: GetDocumentDto[] | undefined;
}

export class GetCourseMaterialUploadRequestDtoPagedResponseDto implements IGetCourseMaterialUploadRequestDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetCourseMaterialUploadRequestDto[] | undefined;

    constructor(data?: IGetCourseMaterialUploadRequestDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetCourseMaterialUploadRequestDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCourseMaterialUploadRequestDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourseMaterialUploadRequestDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCourseMaterialUploadRequestDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetCourseMaterialUploadRequestDto[] | undefined;
}

export class GetDocumentDto implements IGetDocumentDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    externalId?: string | undefined;
    externalUrl?: string | undefined;
    body?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    isImported?: boolean;
    courseId?: string | undefined;
    creatorId?: string | undefined;
    externalSystemId?: string | undefined;
    externalCreatedDate?: Date | undefined;
    fileName?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    size?: number | undefined;
    hash?: string | undefined;
    hashAlgorithm?: string | undefined;
    documentContainerId?: string | undefined;
    courseMaterialUploadRequestId?: string | undefined;
    fileExtension?: string | undefined;

    constructor(data?: IGetDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            this.externalId = _data["externalId"];
            this.externalUrl = _data["externalUrl"];
            this.body = _data["body"];
            this.title = _data["title"];
            this.author = _data["author"];
            this.isImported = _data["isImported"];
            this.courseId = _data["courseId"];
            this.creatorId = _data["creatorId"];
            this.externalSystemId = _data["externalSystemId"];
            this.externalCreatedDate = _data["externalCreatedDate"] ? new Date(_data["externalCreatedDate"].toString()) : <any>undefined;
            this.fileName = _data["fileName"];
            this.uri = _data["uri"];
            this.version = _data["version"];
            this.size = _data["size"];
            this.hash = _data["hash"];
            this.hashAlgorithm = _data["hashAlgorithm"];
            this.documentContainerId = _data["documentContainerId"];
            this.courseMaterialUploadRequestId = _data["courseMaterialUploadRequestId"];
            this.fileExtension = _data["fileExtension"];
        }
    }

    static fromJS(data: any): GetDocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["externalId"] = this.externalId;
        data["externalUrl"] = this.externalUrl;
        data["body"] = this.body;
        data["title"] = this.title;
        data["author"] = this.author;
        data["isImported"] = this.isImported;
        data["courseId"] = this.courseId;
        data["creatorId"] = this.creatorId;
        data["externalSystemId"] = this.externalSystemId;
        data["externalCreatedDate"] = this.externalCreatedDate ? this.externalCreatedDate.toISOString() : <any>undefined;
        data["fileName"] = this.fileName;
        data["uri"] = this.uri;
        data["version"] = this.version;
        data["size"] = this.size;
        data["hash"] = this.hash;
        data["hashAlgorithm"] = this.hashAlgorithm;
        data["documentContainerId"] = this.documentContainerId;
        data["courseMaterialUploadRequestId"] = this.courseMaterialUploadRequestId;
        data["fileExtension"] = this.fileExtension;
        return data;
    }
}

export interface IGetDocumentDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    externalId?: string | undefined;
    externalUrl?: string | undefined;
    body?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    isImported?: boolean;
    courseId?: string | undefined;
    creatorId?: string | undefined;
    externalSystemId?: string | undefined;
    externalCreatedDate?: Date | undefined;
    fileName?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    size?: number | undefined;
    hash?: string | undefined;
    hashAlgorithm?: string | undefined;
    documentContainerId?: string | undefined;
    courseMaterialUploadRequestId?: string | undefined;
    fileExtension?: string | undefined;
}

export class GetFeedDto implements IGetFeedDto {

    constructor(data?: IGetFeedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetFeedDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetFeedDto {
}

export class GetFeedDtoPagedResponseDto implements IGetFeedDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetFeedDto[] | undefined;

    constructor(data?: IGetFeedDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetFeedDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFeedDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFeedDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetFeedDto[] | undefined;
}

export class GetFollowedCourseDto implements IGetFollowedCourseDto {
    accountId?: string;
    courseId?: string;
    courseShortName?: string | undefined;
    courseFullName?: string | undefined;
    courseCode?: string | undefined;

    constructor(data?: IGetFollowedCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.courseId = _data["courseId"];
            this.courseShortName = _data["courseShortName"];
            this.courseFullName = _data["courseFullName"];
            this.courseCode = _data["courseCode"];
        }
    }

    static fromJS(data: any): GetFollowedCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFollowedCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["courseId"] = this.courseId;
        data["courseShortName"] = this.courseShortName;
        data["courseFullName"] = this.courseFullName;
        data["courseCode"] = this.courseCode;
        return data;
    }
}

export interface IGetFollowedCourseDto {
    accountId?: string;
    courseId?: string;
    courseShortName?: string | undefined;
    courseFullName?: string | undefined;
    courseCode?: string | undefined;
}

export class GetFollowedCourseDtoPagedResponseDto implements IGetFollowedCourseDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetFollowedCourseDto[] | undefined;

    constructor(data?: IGetFollowedCourseDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetFollowedCourseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFollowedCourseDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFollowedCourseDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFollowedCourseDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetFollowedCourseDto[] | undefined;
}

export class GetFollowedStudyYearDto implements IGetFollowedStudyYearDto {
    accountId?: string;
    studyYearId?: string;

    constructor(data?: IGetFollowedStudyYearDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.studyYearId = _data["studyYearId"];
        }
    }

    static fromJS(data: any): GetFollowedStudyYearDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFollowedStudyYearDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["studyYearId"] = this.studyYearId;
        return data;
    }
}

export interface IGetFollowedStudyYearDto {
    accountId?: string;
    studyYearId?: string;
}

export class GetFollowedStudyYearDtoPagedResponseDto implements IGetFollowedStudyYearDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetFollowedStudyYearDto[] | undefined;

    constructor(data?: IGetFollowedStudyYearDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetFollowedStudyYearDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFollowedStudyYearDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFollowedStudyYearDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFollowedStudyYearDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetFollowedStudyYearDto[] | undefined;
}

export class GetNotificationDto implements IGetNotificationDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    title?: string | undefined;
    body?: string | undefined;
    isRead?: boolean;
    uri?: string | undefined;
    type?: string | undefined;
    imageUri?: string | undefined;
    receiverId?: string;

    constructor(data?: IGetNotificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.body = _data["body"];
            this.isRead = _data["isRead"];
            this.uri = _data["uri"];
            this.type = _data["type"];
            this.imageUri = _data["imageUri"];
            this.receiverId = _data["receiverId"];
        }
    }

    static fromJS(data: any): GetNotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["body"] = this.body;
        data["isRead"] = this.isRead;
        data["uri"] = this.uri;
        data["type"] = this.type;
        data["imageUri"] = this.imageUri;
        data["receiverId"] = this.receiverId;
        return data;
    }
}

export interface IGetNotificationDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    title?: string | undefined;
    body?: string | undefined;
    isRead?: boolean;
    uri?: string | undefined;
    type?: string | undefined;
    imageUri?: string | undefined;
    receiverId?: string;
}

export class GetNotificationDtoPagedResponseDto implements IGetNotificationDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetNotificationDto[] | undefined;

    constructor(data?: IGetNotificationDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetNotificationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetNotificationDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetNotificationDto[] | undefined;
}

export class GetStudyMaterialDto implements IGetStudyMaterialDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    externalId?: string | undefined;
    externalUrl?: string | undefined;
    body?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    isImported?: boolean;
    courseId?: string | undefined;
    creatorId?: string | undefined;
    externalSystemId?: string | undefined;
    externalCreatedDate?: Date | undefined;
    documentCount?: number;
    documents?: GetDocumentDto[] | undefined;

    constructor(data?: IGetStudyMaterialDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            this.externalId = _data["externalId"];
            this.externalUrl = _data["externalUrl"];
            this.body = _data["body"];
            this.title = _data["title"];
            this.author = _data["author"];
            this.isImported = _data["isImported"];
            this.courseId = _data["courseId"];
            this.creatorId = _data["creatorId"];
            this.externalSystemId = _data["externalSystemId"];
            this.externalCreatedDate = _data["externalCreatedDate"] ? new Date(_data["externalCreatedDate"].toString()) : <any>undefined;
            this.documentCount = _data["documentCount"];
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(GetDocumentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStudyMaterialDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetStudyMaterialDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["externalId"] = this.externalId;
        data["externalUrl"] = this.externalUrl;
        data["body"] = this.body;
        data["title"] = this.title;
        data["author"] = this.author;
        data["isImported"] = this.isImported;
        data["courseId"] = this.courseId;
        data["creatorId"] = this.creatorId;
        data["externalSystemId"] = this.externalSystemId;
        data["externalCreatedDate"] = this.externalCreatedDate ? this.externalCreatedDate.toISOString() : <any>undefined;
        data["documentCount"] = this.documentCount;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetStudyMaterialDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    externalId?: string | undefined;
    externalUrl?: string | undefined;
    body?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    isImported?: boolean;
    courseId?: string | undefined;
    creatorId?: string | undefined;
    externalSystemId?: string | undefined;
    externalCreatedDate?: Date | undefined;
    documentCount?: number;
    documents?: GetDocumentDto[] | undefined;
}

export class GetStudyMaterialDtoPagedResponseDto implements IGetStudyMaterialDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetStudyMaterialDto[] | undefined;

    constructor(data?: IGetStudyMaterialDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetStudyMaterialDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStudyMaterialDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetStudyMaterialDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetStudyMaterialDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetStudyMaterialDto[] | undefined;
}

export class GetStudyYearDto implements IGetStudyYearDto {
    readonly id?: string;
    readonly createdDate?: Date;
    readonly updatedDate?: Date;
    readonly shortName?: string | undefined;
    fullName?: string | undefined;
    description?: string | undefined;
    followingCount?: number | undefined;
    isFollowing?: boolean | undefined;

    constructor(data?: IGetStudyYearDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            (<any>this).createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            (<any>this).updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>undefined;
            (<any>this).shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.description = _data["description"];
            this.followingCount = _data["followingCount"];
            this.isFollowing = _data["isFollowing"];
        }
    }

    static fromJS(data: any): GetStudyYearDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetStudyYearDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        data["followingCount"] = this.followingCount;
        data["isFollowing"] = this.isFollowing;
        return data;
    }
}

export interface IGetStudyYearDto {
    id?: string;
    createdDate?: Date;
    updatedDate?: Date;
    shortName?: string | undefined;
    fullName?: string | undefined;
    description?: string | undefined;
    followingCount?: number | undefined;
    isFollowing?: boolean | undefined;
}

export class GetStudyYearDtoPagedResponseDto implements IGetStudyYearDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetStudyYearDto[] | undefined;

    constructor(data?: IGetStudyYearDtoPagedResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.page = _data["page"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetStudyYearDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStudyYearDtoPagedResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetStudyYearDtoPagedResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["page"] = this.page;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetStudyYearDtoPagedResponseDto {
    limit?: number;
    page?: number;
    totalPages?: number | undefined;
    data?: GetStudyYearDto[] | undefined;
}

export class GetUnreadNotificationsDto implements IGetUnreadNotificationsDto {
    unread?: number;

    constructor(data?: IGetUnreadNotificationsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unread = _data["unread"];
        }
    }

    static fromJS(data: any): GetUnreadNotificationsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUnreadNotificationsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unread"] = this.unread;
        return data;
    }
}

export interface IGetUnreadNotificationsDto {
    unread?: number;
}

export class PostCourseDto implements IPostCourseDto {
    code?: string | undefined;
    shortName?: string | undefined;
    fullName?: string | undefined;
    staff?: string | undefined;
    description?: string | undefined;
    rules?: string | undefined;
    studyYearId?: string;

    constructor(data?: IPostCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.staff = _data["staff"];
            this.description = _data["description"];
            this.rules = _data["rules"];
            this.studyYearId = _data["studyYearId"];
        }
    }

    static fromJS(data: any): PostCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["staff"] = this.staff;
        data["description"] = this.description;
        data["rules"] = this.rules;
        data["studyYearId"] = this.studyYearId;
        return data;
    }
}

export interface IPostCourseDto {
    code?: string | undefined;
    shortName?: string | undefined;
    fullName?: string | undefined;
    staff?: string | undefined;
    description?: string | undefined;
    rules?: string | undefined;
    studyYearId?: string;
}

/** See  model. */
export class PostCourseMaterialUploadRequestDto implements IPostCourseMaterialUploadRequestDto {
    body?: string | undefined;
    remark?: string | undefined;
    courseId?: string;
    documents?: PostDocumentDto[] | undefined;

    constructor(data?: IPostCourseMaterialUploadRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.body = _data["body"];
            this.remark = _data["remark"];
            this.courseId = _data["courseId"];
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(PostDocumentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PostCourseMaterialUploadRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostCourseMaterialUploadRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["remark"] = this.remark;
        data["courseId"] = this.courseId;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        return data;
    }
}

/** See  model. */
export interface IPostCourseMaterialUploadRequestDto {
    body?: string | undefined;
    remark?: string | undefined;
    courseId?: string;
    documents?: PostDocumentDto[] | undefined;
}

export class PostDocumentDto implements IPostDocumentDto {
    body?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    courseId?: string;
    version?: string | undefined;

    constructor(data?: IPostDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.body = _data["body"];
            this.title = _data["title"];
            this.author = _data["author"];
            this.courseId = _data["courseId"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): PostDocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["title"] = this.title;
        data["author"] = this.author;
        data["courseId"] = this.courseId;
        data["version"] = this.version;
        return data;
    }
}

export interface IPostDocumentDto {
    body?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    courseId?: string;
    version?: string | undefined;
}

export class PostFollowedCourseDto implements IPostFollowedCourseDto {
    accountId?: string;
    courseId?: string;

    constructor(data?: IPostFollowedCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.courseId = _data["courseId"];
        }
    }

    static fromJS(data: any): PostFollowedCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostFollowedCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["courseId"] = this.courseId;
        return data;
    }
}

export interface IPostFollowedCourseDto {
    accountId?: string;
    courseId?: string;
}

export class PostFollowedStudyYearDto implements IPostFollowedStudyYearDto {
    accountId?: string;
    studyYearId?: string;

    constructor(data?: IPostFollowedStudyYearDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.studyYearId = _data["studyYearId"];
        }
    }

    static fromJS(data: any): PostFollowedStudyYearDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostFollowedStudyYearDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["studyYearId"] = this.studyYearId;
        return data;
    }
}

export interface IPostFollowedStudyYearDto {
    accountId?: string;
    studyYearId?: string;
}

export class PostNotificationReadStatusDto implements IPostNotificationReadStatusDto {
    notificationId?: string;
    readState?: boolean;

    constructor(data?: IPostNotificationReadStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationId = _data["notificationId"];
            this.readState = _data["readState"];
        }
    }

    static fromJS(data: any): PostNotificationReadStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostNotificationReadStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationId"] = this.notificationId;
        data["readState"] = this.readState;
        return data;
    }
}

export interface IPostNotificationReadStatusDto {
    notificationId?: string;
    readState?: boolean;
}

export class PutAccountDto implements IPutAccountDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    facultyStudentId?: string | undefined;

    constructor(data?: IPutAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.facultyStudentId = _data["facultyStudentId"];
        }
    }

    static fromJS(data: any): PutAccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new PutAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["facultyStudentId"] = this.facultyStudentId;
        return data;
    }
}

export interface IPutAccountDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    facultyStudentId?: string | undefined;
}

export class PutCourseDto implements IPutCourseDto {
    code?: string | undefined;
    shortName?: string | undefined;
    fullName?: string | undefined;
    staff?: string | undefined;
    description?: string | undefined;
    rules?: string | undefined;

    constructor(data?: IPutCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.staff = _data["staff"];
            this.description = _data["description"];
            this.rules = _data["rules"];
        }
    }

    static fromJS(data: any): PutCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PutCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["staff"] = this.staff;
        data["description"] = this.description;
        data["rules"] = this.rules;
        return data;
    }
}

export interface IPutCourseDto {
    code?: string | undefined;
    shortName?: string | undefined;
    fullName?: string | undefined;
    staff?: string | undefined;
    description?: string | undefined;
    rules?: string | undefined;
}

export class PutStudyYearDto implements IPutStudyYearDto {
    shortName?: string | undefined;
    fullName?: string | undefined;
    description?: string | undefined;

    constructor(data?: IPutStudyYearDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): PutStudyYearDto {
        data = typeof data === 'object' ? data : {};
        let result = new PutStudyYearDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        return data;
    }
}

export interface IPutStudyYearDto {
    shortName?: string | undefined;
    fullName?: string | undefined;
    description?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class PostDto implements IPostDto {
    body?: string | undefined;
    remark?: string | undefined;
    courseId?: string;
    documents?: PostDocumentDto[] | undefined;

    constructor(data?: IPostDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.body = _data["body"];
            this.remark = _data["remark"];
            this.courseId = _data["courseId"];
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(PostDocumentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PostDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["remark"] = this.remark;
        data["courseId"] = this.courseId;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPostDto {
    body?: string | undefined;
    remark?: string | undefined;
    courseId?: string;
    documents?: PostDocumentDto[] | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}