// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeLearn.Data.Persistence;

#nullable disable

namespace WeLearn.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220814171532_Update_Nullable_Content")]
    partial class Update_Nullable_Content
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WeLearn.Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WeLearn.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WeLearn.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ExternalSystemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsImported")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExternalSystemId");

                    b.ToTable("Contents");

                    b.HasDiscriminator<string>("Type").HasValue("Content");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Staff")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StudyYearId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudyYearId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("WeLearn.Data.Models.CourseMaterialUploadRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatorId");

                    b.ToTable("CourseMaterialUploadRequests");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Credentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExternalSystemId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("WeLearn.Data.Models.ExternalSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExternalSystems");
                });

            modelBuilder.Entity("WeLearn.Data.Models.FollowedCourse", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("FollowedCourses");
                });

            modelBuilder.Entity("WeLearn.Data.Models.FollowedStudyYear", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudyYearId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountId", "StudyYearId");

                    b.HasIndex("StudyYearId");

                    b.ToTable("FollowedStudyYear");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Type").HasValue("Notification");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.AccountRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles");

                    b.HasDiscriminator<string>("Type").HasValue("AccountRole");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiRoles");
                });

            modelBuilder.Entity("WeLearn.Data.Models.StudyYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StudyYears");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Document", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.Content");

                    b.Property<Guid?>("CourseMaterialUploadRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentContainerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("HashAlgorithm")
                        .HasColumnType("text");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CourseMaterialUploadRequestId");

                    b.HasIndex("DocumentContainerId");

                    b.HasDiscriminator().HasValue("Document");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.DocumentContainer", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.Content");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("DocumentContainer");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Notifications.CommentNotification", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Notification");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.HasIndex("CommentId");

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Notifications.ContentNotification", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Notification");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.HasIndex("ContentId");

                    b.HasDiscriminator().HasValue("Content");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.CourseAdminRole", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Roles.AccountRole");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("CourseAdmin");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.StudyYearAdminRole", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Roles.AccountRole");

                    b.Property<Guid>("StudyYearId")
                        .HasColumnType("uuid");

                    b.HasIndex("StudyYearId");

                    b.HasDiscriminator().HasValue("StudyYearAdmin");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Notice", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.DocumentContainer");

                    b.Property<DateTime?>("RelevantUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("Notice");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Post", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.DocumentContainer");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.StudyMaterial", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.DocumentContainer");

                    b.HasDiscriminator().HasValue("StudyMaterial");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Notices.CourseNotice", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.Notice");

                    b.HasDiscriminator().HasValue("NoticeCourse");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Notices.GeneralNotice", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.Notice");

                    b.HasDiscriminator().HasValue("NoticeGeneral");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Notices.StudyYearNotice", b =>
                {
                    b.HasBaseType("WeLearn.Data.Models.Content.Notice");

                    b.Property<Guid>("StudyYearId")
                        .HasColumnType("uuid");

                    b.HasIndex("StudyYearId");

                    b.HasDiscriminator().HasValue("NoticeStudyYear");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeLearn.Data.Models.Account", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", "User")
                        .WithOne("Account")
                        .HasForeignKey("WeLearn.Data.Models.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Comment", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Account", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Content.Content", "Content")
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Content", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Course", "Course")
                        .WithMany("Contents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeLearn.Data.Models.Account", "Creator")
                        .WithMany("CreatedContent")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeLearn.Data.Models.ExternalSystem", "ExternalSystem")
                        .WithMany("Contents")
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");

                    b.Navigation("Creator");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Course", b =>
                {
                    b.HasOne("WeLearn.Data.Models.StudyYear", "StudyYear")
                        .WithMany("Courses")
                        .HasForeignKey("StudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyYear");
                });

            modelBuilder.Entity("WeLearn.Data.Models.CourseMaterialUploadRequest", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Course", "Course")
                        .WithMany("CourseMaterialUploadRequests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Account", "Creator")
                        .WithMany("CourseMaterialUploadRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Credentials", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Course", "Course")
                        .WithMany("Credentials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeLearn.Data.Models.Account", "Creator")
                        .WithMany("Credentials")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.ExternalSystem", "ExternalSystem")
                        .WithMany("Credentials")
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Creator");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("WeLearn.Data.Models.FollowedCourse", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Account", "Account")
                        .WithMany("FollowedCourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Course", "Course")
                        .WithMany("FollowingUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WeLearn.Data.Models.FollowedStudyYear", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Account", "Account")
                        .WithMany("FollowedStudyYears")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.StudyYear", "StudyYear")
                        .WithMany("FollowedStudyYears")
                        .HasForeignKey("StudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("StudyYear");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Notification", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Account", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.AccountRole", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Account", "Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Roles.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Document", b =>
                {
                    b.HasOne("WeLearn.Data.Models.CourseMaterialUploadRequest", "CourseMaterialUploadRequest")
                        .WithMany("Documents")
                        .HasForeignKey("CourseMaterialUploadRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeLearn.Data.Models.Content.DocumentContainer", "DocumentContainer")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentContainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CourseMaterialUploadRequest");

                    b.Navigation("DocumentContainer");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Notifications.CommentNotification", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Comment", "Comment")
                        .WithMany("CommentNotifications")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Notifications.ContentNotification", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Content.Content", "Content")
                        .WithMany("ContentNotifications")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.CourseAdminRole", b =>
                {
                    b.HasOne("WeLearn.Data.Models.Course", "Course")
                        .WithMany("AdminRoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.StudyYearAdminRole", b =>
                {
                    b.HasOne("WeLearn.Data.Models.StudyYear", "StudyYear")
                        .WithMany("AdminRoles")
                        .HasForeignKey("StudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyYear");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Notices.StudyYearNotice", b =>
                {
                    b.HasOne("WeLearn.Data.Models.StudyYear", "StudyYear")
                        .WithMany("StudyYearNotices")
                        .HasForeignKey("StudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyYear");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CourseMaterialUploadRequests");

                    b.Navigation("CreatedContent");

                    b.Navigation("Credentials");

                    b.Navigation("FollowedCourses");

                    b.Navigation("FollowedStudyYears");

                    b.Navigation("Notifications");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WeLearn.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("WeLearn.Data.Models.Comment", b =>
                {
                    b.Navigation("CommentNotifications");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.Content", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContentNotifications");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Course", b =>
                {
                    b.Navigation("AdminRoles");

                    b.Navigation("Contents");

                    b.Navigation("CourseMaterialUploadRequests");

                    b.Navigation("Credentials");

                    b.Navigation("FollowingUsers");
                });

            modelBuilder.Entity("WeLearn.Data.Models.CourseMaterialUploadRequest", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("WeLearn.Data.Models.ExternalSystem", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Roles.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("WeLearn.Data.Models.StudyYear", b =>
                {
                    b.Navigation("AdminRoles");

                    b.Navigation("Courses");

                    b.Navigation("FollowedStudyYears");

                    b.Navigation("StudyYearNotices");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Content.DocumentContainer", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
